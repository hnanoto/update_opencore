{
    "environment_check": "Checking environment...",
    "environment_success": "Environment verified successfully.",
    "environment_error_macos": "Error: This script must be run on macOS.",
    "environment_error_root": "This script requires administrator permissions. Requesting sudo...",
    "select_efi": "Select the number of the EFI partition you want to use:",
    "no_efi_found": "Error: No EFI partitions found.",
    "mount_point": "Mount Point",
    "efi_detect_error": "Error: Failed to run 'diskutil list'",
    "efi_partition_error": "Error: The selected EFI partition is not mounted.",
    "mount_manualy": "Mount the EFI manually and run the script again.",
    "selected_efi": "Selected EFI partition:",
    "backup_create": "Creating backup in",
    "backup_create_success": "Backup created successfully.",
    "backup_create_error": "Error creating backup:",
    "dependencies_check": "Checking dependencies...",
    "dependencies_success": "All dependencies are available.",
    "dependency_not_found": "Error: Dependency '{cmd}' not found.",
    "python3_needed": "Python 3 is required for the script. Install it via Homebrew with 'brew install python3'.",
    "python_script_created": "Python script add_new_keys.py created.",
    "python_script_creation_error": "Error creating Python script:",
    "reading_plist_files_error": "Error reading plist files:",
    "adding_new_keys": "Adding new keys from Sample.plist to config.plist...",
    "running_add_new_keys": "Running add_new_keys.py to add new keys...",
    "new_keys_added_success": "New keys successfully added to config.plist!",
    "new_keys_added_error": "Error adding new keys to config.plist.",
    "using_add_new_keys": "Using add_new_keys.py",
    "restoring_config_plist": "Restoring config.plist to binary format...",
    "restoring_config_plist_error": "Error restoring config.plist to binary format:",
    "converting_config_plist": "Converting config.plist to XML format...",
    "converting_config_plist_error": "Error converting config.plist to XML format:",
    "reading_config_plist_error": "Error: config.plist file not found in",
    "calling_python_script_error": "Error calling Python script:",
    "loading_config_plist_success": "config.plist file loaded successfully using plistlib.",
    "loading_config_plist_error": "Error loading config.plist with plistlib:",
    "extracting_drivers_error": "Error extracting drivers from config.plist:",
    "key_uefi_drivers_error": "Error accessing UEFI -> Drivers key in config.plist:",
    "enabled_drivers_list": "List of drivers (plistlib):",
    "enabled_drivers": "Enabled drivers (plistlib):",
    "no_issues_found": "No issues found.",
    "validating_config_plist": "Validating config.plist with ocvalidate...",
    "ocvalidate_path_error": "Error: ocvalidate not found in {ocvalidate_path}. Download the latest version of OpenCore.",
    "config_plist_path_error": "Error: config.plist not found in {config_plist_path}.",
    "validation_success": "config.plist validation completed successfully. ocvalidate output:",
    "validation_error": "Error validating config.plist. ocvalidate output:",
    "ocvalidate_execution_error": "Error executing ocvalidate:",
    "updating_drivers": "Updating drivers in",
    "updating_driver": "Updating",
    "updating_driver_overwrite": "(overwriting)...",
    "skipping_driver": "Driver {new_driver} is not enabled in config.plist. Skipping.",
    "removing_unused_drivers": "Removing unused drivers from the folder",
    "removing_driver": "Removing unused driver:",
    "updating_drivers_success": "Drivers updated and unused drivers removed successfully.",
    "drivers_update_error": "Error updating",
    "drivers_not_found": "Error: EFI drivers folder not found in",
    "downloading_hfs": "Downloading HFSPlus.efi from OcBinaryData repository...",
    "hfs_download_link_found": "HFSPlus.efi download link found:",
    "hfs_download_success": "HFSPlus.efi downloaded successfully.",
    "hfs_download_failed": "Error: HFSPlus.efi download failed",
    "hfs_not_found": "Error: HfsPlus.efi not found.",
    "hfs_copy_error": "Error copying HfsPlus.efi to EFI Drivers folder:",
    "hfs_copy_success": "HfsPlus.efi copied to EFI Drivers folder.",
    "version_not_detected": "Version not detected",
    "latest_version": "Latest OpenCore version",
    "opencore_download_link_found": "OpenCore version {build_type} download link found",
    "downloading_opencore": "Downloading OpenCore version",
    "download_success": "OpenCore version {build_type} downloaded and extracted successfully.",
    "download_fail": "Error: Unable to access GitHub API or download OpenCore",
    "download_fail_zip": "Error: Failed to download OpenCore",
    "invalid_zip": "Error: The OpenCore ZIP file is corrupted or invalid.",
    "extract_error": "Error: Failed to extract OpenCore.zip.",
    "pulled_drivers_folder": "Skipping the Drivers folder as instructed.",
    "updating_efi_files": "Updating EFI files in",
    "update_efi_success": "EFI files updated successfully, except for the Drivers folder.",
    "update_efi_error": "Error updating EFI files:",
    "source_folder_not_found": "Error: Source EFI folder not found in",
    "exit": "Exiting...",
    "invalid_option": "Invalid option. Try again.",
    "choose_option": "Choose an option:",
    "update_opencore_release": "Update OpenCore (RELEASE)",
    "update_opencore_debug": "Update OpenCore (DEBUG)",
    "update_drivers_only": "Update drivers only",
    "add_new_keys": "Add new keys to config.plist",
    "validate_config_plist": "Validate config.plist",
    "cleaning_up": "Cleaning up temporary files...",
    "cleanup_completed": "Cleanup completed.",
    "wait_5_seconds": "Waiting 5 seconds...",
    "update_boot_files": "Update boot files (BOOTx64.efi and OpenCore.efi)",
    "update_boot_files_success": "Boot files updated successfully!",
    "update_opencore_pre_release": "Update OpenCore (Pre-release)"
}